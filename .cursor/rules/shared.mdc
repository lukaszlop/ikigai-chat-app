---
description:
globs:
alwaysApply: true
---

# AI Rules for IkigAI Chat App

IkigAI Chat App (MVP) is a lightweight web application that enables conversations with a language model and allows attaching multimedia and text files within a single conversation. The product aims to demonstrate key capabilities: response streaming, attachment handling, simple profile personalization, and mocked authentication.

## Tech Stack

- Next.js 15
- React 19
- TypeScript 5
- Tailwind 4
- Zustand 5
- Shadcn/ui

## Project Structure

When introducing changes to the project, always follow the directory structure below:

- `./src` - source code
- `./src/app` - Next.js App Router pages and layouts
- `./src/app/api` - API routes (server-side endpoints)
- `./src/app/globals.css` - Global CSS styles
- `./src/components` - React components
- `./src/components/ui` - Shadcn/ui components
- `./src/lib` - Utility functions, services, and helpers
- `./src/types.ts` - Shared TypeScript types and interfaces
- `./src/stores` - Zustand state management stores
- `./src/hooks` - Custom React hooks
- `./src/assets` - Static internal assets
- `./public` - Public assets accessible via URL
- `./middleware.ts` - Next.js middleware (root level)

When modifying the directory structure, always update this section.

## Coding practices

### Guidelines for clean code

- Use feedback from linters to improve the code when making changes.
- Prioritize error handling and edge cases.
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.
